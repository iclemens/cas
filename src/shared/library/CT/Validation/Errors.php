<?php
	/**
	 * Validation Component, Citrus-IT Online Boekhouding
	 *
	 * @author Ivar Clemens <post@ivarclemens.nl>
	 * @version 1.0
	 * @package boekhouding
	 */

	/**
	 * Stores errors generated by the validation class
	 *
	 * @package boekhouding
	 */
	class CT_Validation_Errors
	{
		/**
		 * Variable containing global (object wide) errors
		 * @access private
		 * @var array 
		 */
		private $_global_errors = array();

		/**
		 * Variable containing field specific errors
		 * @access private
		 * @var array 
		 */
		private $_field_errors = array();

		/**
		 * Adds a global error
		 * @param string $error
		 */
		public function reject($error) 
		{
			array_push($this->_global_errors, $error);
		}

		/**
		 * Adds a field specific error
		 * @param string $field
		 * @param string $error
		 */
		public function rejectValue($field, $error)
		{
			if(!array_key_exists($field, $this->_field_errors))
				$this->_field_errors[$field] = array();
			
			array_push($this->_field_errors[$field], $error);
		}

		/**
		 * True if an error exists (checks both field and global)
		 * @return boolean
		 */
		public function hasErrors()
		{
			if($this->hasGlobalErrors() || $this->hasFieldErrors(null))
				return true;
			return false;
		}

		/**
	 	 * Returns an array containing all error messages
		 * @return array
		 */
		public function getErrors()
		{
			return array_merge($this->getGlobalErrors(), $this->getFieldErrors(null));
		}

		/**
		 * True if a global error exists
		 * @return boolean
		 */
		public function hasGlobalErrors()
		{
			if(count($this->_global_errors))
				return true;
			else
				return false;
		}

		/**
	 	 * Returns an array containing all global error messages
		 * @return array
		 */
		public function getGlobalErrors()
		{
			return $this->_global_errors;
		}

		/**
	 	 * True if the field has is in error
		 * @param string $field Fieldname or null to check all fields 
		 * @return boolean
		 */
		public function hasFieldErrors($field)
		{
			if($field == null)
			{
				foreach($this->_field_errors as $field_error)
					if(count($field_error))
						return true;
				return false;
			} else {
				if(!array_key_exists($field, $this->_field_errors))
					return false;

				if(count($this->_field_errors))
					return true;
				return false;
			}
		}

		/**
	 	 * Returns an array containing all field-specific error messages
		 * @param string $field Fieldname or null to check all fields
		 * @return array
		 */
		public function getFieldErrors($field)
		{
			if($field == null)
			{
				$errors = array();
				foreach($this->_field_errors as $field => $field_error)
					$errors = array_merge($errors, $this->getFieldErrors($field));
				return $errors;
			} else {
				if(!array_key_exists($field, $this->_field_errors))
					return array();
				return $this->_field_errors[$field];
			}
		}
	}
?>